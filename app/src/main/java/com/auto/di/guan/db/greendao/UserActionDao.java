package com.auto.di.guan.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.auto.di.guan.db.UserAction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ACTION".
*/
public class UserActionDao extends AbstractDao<UserAction, Long> {

    public static final String TABLENAME = "USER_ACTION";

    /**
     * Properties of entity UserAction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property ActionCmd = new Property(2, String.class, "actionCmd", false, "ACTION_CMD");
        public final static Property ActionName = new Property(3, String.class, "actionName", false, "ACTION_NAME");
        public final static Property ControlId = new Property(4, int.class, "controlId", false, "CONTROL_ID");
        public final static Property ActionTime = new Property(5, long.class, "actionTime", false, "ACTION_TIME");
        public final static Property ActionId = new Property(6, int.class, "actionId", false, "ACTION_ID");
        public final static Property ActionType = new Property(7, int.class, "actionType", false, "ACTION_TYPE");
        public final static Property ActionTypeName = new Property(8, String.class, "actionTypeName", false, "ACTION_TYPE_NAME");
        public final static Property ActionStatus = new Property(9, int.class, "actionStatus", false, "ACTION_STATUS");
        public final static Property ActionStatusName = new Property(10, String.class, "actionStatusName", false, "ACTION_STATUS_NAME");
        public final static Property UserName = new Property(11, String.class, "userName", false, "USER_NAME");
    }


    public UserActionDao(DaoConfig config) {
        super(config);
    }
    
    public UserActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"ACTION_CMD\" TEXT," + // 2: actionCmd
                "\"ACTION_NAME\" TEXT," + // 3: actionName
                "\"CONTROL_ID\" INTEGER NOT NULL ," + // 4: controlId
                "\"ACTION_TIME\" INTEGER NOT NULL ," + // 5: actionTime
                "\"ACTION_ID\" INTEGER NOT NULL ," + // 6: actionId
                "\"ACTION_TYPE\" INTEGER NOT NULL ," + // 7: actionType
                "\"ACTION_TYPE_NAME\" TEXT," + // 8: actionTypeName
                "\"ACTION_STATUS\" INTEGER NOT NULL ," + // 9: actionStatus
                "\"ACTION_STATUS_NAME\" TEXT," + // 10: actionStatusName
                "\"USER_NAME\" TEXT);"); // 11: userName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String actionCmd = entity.getActionCmd();
        if (actionCmd != null) {
            stmt.bindString(3, actionCmd);
        }
 
        String actionName = entity.getActionName();
        if (actionName != null) {
            stmt.bindString(4, actionName);
        }
        stmt.bindLong(5, entity.getControlId());
        stmt.bindLong(6, entity.getActionTime());
        stmt.bindLong(7, entity.getActionId());
        stmt.bindLong(8, entity.getActionType());
 
        String actionTypeName = entity.getActionTypeName();
        if (actionTypeName != null) {
            stmt.bindString(9, actionTypeName);
        }
        stmt.bindLong(10, entity.getActionStatus());
 
        String actionStatusName = entity.getActionStatusName();
        if (actionStatusName != null) {
            stmt.bindString(11, actionStatusName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(12, userName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String actionCmd = entity.getActionCmd();
        if (actionCmd != null) {
            stmt.bindString(3, actionCmd);
        }
 
        String actionName = entity.getActionName();
        if (actionName != null) {
            stmt.bindString(4, actionName);
        }
        stmt.bindLong(5, entity.getControlId());
        stmt.bindLong(6, entity.getActionTime());
        stmt.bindLong(7, entity.getActionId());
        stmt.bindLong(8, entity.getActionType());
 
        String actionTypeName = entity.getActionTypeName();
        if (actionTypeName != null) {
            stmt.bindString(9, actionTypeName);
        }
        stmt.bindLong(10, entity.getActionStatus());
 
        String actionStatusName = entity.getActionStatusName();
        if (actionStatusName != null) {
            stmt.bindString(11, actionStatusName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(12, userName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserAction readEntity(Cursor cursor, int offset) {
        UserAction entity = new UserAction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actionCmd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // actionName
            cursor.getInt(offset + 4), // controlId
            cursor.getLong(offset + 5), // actionTime
            cursor.getInt(offset + 6), // actionId
            cursor.getInt(offset + 7), // actionType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // actionTypeName
            cursor.getInt(offset + 9), // actionStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // actionStatusName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // userName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setActionCmd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActionName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setControlId(cursor.getInt(offset + 4));
        entity.setActionTime(cursor.getLong(offset + 5));
        entity.setActionId(cursor.getInt(offset + 6));
        entity.setActionType(cursor.getInt(offset + 7));
        entity.setActionTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setActionStatus(cursor.getInt(offset + 9));
        entity.setActionStatusName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserAction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserAction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserAction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
